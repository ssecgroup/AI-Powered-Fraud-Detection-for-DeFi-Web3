# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

# Sample data (to be replaced with actual transaction data)
data = {
    'wallet_age': [120, 30, 50, 200, 15],  # Wallet age in days
    'tx_frequency': [5, 20, 2, 50, 10],  # Transactions per month
    'tx_amount': [1000, 20000, 50, 300, 500],  # Average transaction amount
    'connected_to_fraud': [0, 1, 0, 1, 0],  # 1 for fraud, 0 for legit
    'fraud': [0, 1, 0, 1, 0]  # Target variable (fraud or not)
}

# Convert data to DataFrame
df = pd.DataFrame(data)

# Define features and target
X = df.drop('fraud', axis=1)
y = df['fraud']

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the RandomForestClassifier
model = RandomForestClassifier(n_estimators=100)
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))

# Predict fraud risk score (0-100) for new data
def predict_risk(wallet_age, tx_frequency, tx_amount, connected_to_fraud):
    data = [[wallet_age, tx_frequency, tx_amount, connected_to_fraud]]
    risk_score = model.predict_proba(data)[0][1] * 100  # Probability of fraud as risk score
    return risk_score

# Example: Predict risk for a new wallet
risk_score = predict_risk(30, 15, 1000, 1)
print(f"Fraud Risk Score: {risk_score}")
